{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\MernDemo\\\\frontend\\\\src\\\\services\\\\authservice.js\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nuseS;\nconst register = user => {\n  const {\n    name,\n    email,\n    password\n  } = {\n    ...user\n  };\n  return axios.post(\"http://localhost:8081/Register\", {\n    name,\n    email,\n    password\n  });\n};\n\n//\nconst login = async user => {\n  const {\n    email,\n    password\n  } = {\n    ...user\n  };\n  return axios.post(\"http://localhost:8081/login\", {\n    email,\n    password\n  }, {\n    withCredentials: true\n  }).then(response => {\n    if (response.data.sessUser) {\n      console.log(response.data);\n      localStorage.setItem(\"user\", JSON.stringify(response.data.sessUser));\n    }\n    return response.data;\n  });\n};\n\n//\nconst logout = async () => {\n  return axios.post(\"http://localhost:8081/logout\", {}, {\n    withCredentials: true\n  }).then(response => {\n    localStorage.removeItem(\"user\");\n    return response.data;\n  });\n};\n\n//\n\nconst [userData, setUserData] = useState({\n  token: undefined\n});\nconst checkLoggedIn = async () => {\n  let token = localStorage.getItem(\"user\");\n  if (token === \"\") {\n    localStorage.setItem(\"user\", \"\");\n    token = \"\";\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this);\n  }\n  const tokenResponse = await axios.post('http://localhost:8081/tokenIsValid', null, {\n    headers: {\n      \"x-auth-token\": token\n    }\n  });\n  if (tokenResponse.data) {\n    const userRes = await axios.get(\"http://localhost:8081/\", {\n      headers: {\n        \"user\": token\n      }\n    });\n    setUserData({\n      token,\n      user: userRes.data\n    });\n  }\n};\nconst AuthService = {\n  register,\n  login,\n  logout,\n  checkLoggedIn\n};\nexport default AuthService;","map":{"version":3,"names":["axios","useS","register","user","name","email","password","post","login","withCredentials","then","response","data","sessUser","console","log","localStorage","setItem","JSON","stringify","logout","removeItem","userData","setUserData","useState","token","undefined","checkLoggedIn","getItem","tokenResponse","headers","userRes","get","AuthService"],"sources":["E:/Projects/MernDemo/frontend/src/services/authservice.js"],"sourcesContent":["import axios from \"axios\";\r\nuseS\r\n\r\nconst register = (user) => {\r\n  const { name, email, password } = { ...user };\r\n  return axios.post(\"http://localhost:8081/Register\", {\r\n    name,\r\n    email,\r\n    password,\r\n  });\r\n};\r\n\r\n//\r\nconst login = async (user) => {\r\n  const { email, password } = { ...user };\r\n  return axios\r\n    .post(\r\n      \"http://localhost:8081/login\",\r\n      {\r\n        email,\r\n        password,\r\n      },\r\n      { withCredentials: true }\r\n    )\r\n    .then((response) => {\r\n      if (response.data.sessUser) {\r\n        console.log(response.data);\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data.sessUser));\r\n      }\r\n      return response.data;\r\n    });\r\n};\r\n\r\n//\r\nconst logout = async () => {\r\n  \r\n  return axios.post(\"http://localhost:8081/logout\",{},{ withCredentials: true}).then((response) => {\r\n    localStorage.removeItem(\"user\");\r\n    return response.data;\r\n  });\r\n};\r\n\r\n//\r\n\r\nconst [ userData, setUserData] = useState({\r\n  token: undefined,\r\n});\r\n\r\nconst checkLoggedIn = async () => {\r\n  let token = localStorage.getItem(\"user\");\r\n  if(token === \"\"){\r\n    localStorage.setItem(\"user\", \"\");\r\n    token = \"\";\r\n   return <Navigate to =\"/Login\"/>\r\n  }\r\n\r\n  const tokenResponse = await axios.post('http://localhost:8081/tokenIsValid', null, {headers: {\"x-auth-token\": token}});\r\n  if (tokenResponse.data) {\r\n    const userRes = await axios.get(\"http://localhost:8081/\", {\r\n      headers: { \"user\": token },\r\n    });\r\n    setUserData({\r\n      token,\r\n      user: userRes.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst AuthService = {\r\n  register,\r\n  login,\r\n  logout,\r\n  checkLoggedIn,\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAC1BC,IAAI;AAEJ,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EACzB,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAG;IAAE,GAAGH;EAAK,CAAC;EAC7C,OAAOH,KAAK,CAACO,IAAI,CAAC,gCAAgC,EAAE;IAClDH,IAAI;IACJC,KAAK;IACLC;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAME,KAAK,GAAG,MAAOL,IAAI,IAAK;EAC5B,MAAM;IAAEE,KAAK;IAAEC;EAAS,CAAC,GAAG;IAAE,GAAGH;EAAK,CAAC;EACvC,OAAOH,KAAK,CACTO,IAAI,CACH,6BAA6B,EAC7B;IACEF,KAAK;IACLC;EACF,CAAC,EACD;IAAEG,eAAe,EAAE;EAAK,CAAC,CAC1B,CACAC,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACC,IAAI,CAACC,QAAQ,EAAE;MAC1BC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACC,IAAI,CAAC;MAC1BI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC;IACtE;IACA,OAAOF,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAMQ,MAAM,GAAG,YAAY;EAEzB,OAAOpB,KAAK,CAACO,IAAI,CAAC,8BAA8B,EAAC,CAAC,CAAC,EAAC;IAAEE,eAAe,EAAE;EAAI,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;IAC/FK,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;IAC/B,OAAOV,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC;AACJ,CAAC;;AAED;;AAEA,MAAM,CAAEU,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC;EACxCC,KAAK,EAAEC;AACT,CAAC,CAAC;AAEF,MAAMC,aAAa,GAAG,YAAY;EAChC,IAAIF,KAAK,GAAGT,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC;EACxC,IAAGH,KAAK,KAAK,EAAE,EAAC;IACdT,YAAY,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IAChCQ,KAAK,GAAG,EAAE;IACX,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAE;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAE;EAChC;EAEA,MAAMI,aAAa,GAAG,MAAM7B,KAAK,CAACO,IAAI,CAAC,oCAAoC,EAAE,IAAI,EAAE;IAACuB,OAAO,EAAE;MAAC,cAAc,EAAEL;IAAK;EAAC,CAAC,CAAC;EACtH,IAAII,aAAa,CAACjB,IAAI,EAAE;IACtB,MAAMmB,OAAO,GAAG,MAAM/B,KAAK,CAACgC,GAAG,CAAC,wBAAwB,EAAE;MACxDF,OAAO,EAAE;QAAE,MAAM,EAAEL;MAAM;IAC3B,CAAC,CAAC;IACFF,WAAW,CAAC;MACVE,KAAK;MACLtB,IAAI,EAAE4B,OAAO,CAACnB;IAChB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,MAAMqB,WAAW,GAAG;EAClB/B,QAAQ;EACRM,KAAK;EACLY,MAAM;EACNO;AACF,CAAC;AAED,eAAeM,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}